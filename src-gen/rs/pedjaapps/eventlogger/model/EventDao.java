package rs.pedjaapps.eventlogger.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rs.pedjaapps.eventlogger.model.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Short_desc = new Property(2, String.class, "short_desc", false, "SHORT_DESC");
        public final static Property Long_desc = new Property(3, String.class, "long_desc", false, "LONG_DESC");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Level = new Property(5, int.class, "level", false, "LEVEL");
        public final static Property Icon = new Property(6, byte[].class, "icon", false, "ICON");
    };


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TIMESTAMP' INTEGER NOT NULL ," + // 1: timestamp
                "'SHORT_DESC' TEXT," + // 2: short_desc
                "'LONG_DESC' TEXT," + // 3: long_desc
                "'TYPE' INTEGER NOT NULL ," + // 4: type
                "'LEVEL' INTEGER NOT NULL ," + // 5: level
                "'ICON' BLOB);"); // 6: icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimestamp().getTime());
 
        String short_desc = entity.getShort_desc();
        if (short_desc != null) {
            stmt.bindString(3, short_desc);
        }
 
        String long_desc = entity.getLong_desc();
        if (long_desc != null) {
            stmt.bindString(4, long_desc);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getLevel());
 
        byte[] icon = entity.getIcon();
        if (icon != null) {
            stmt.bindBlob(7, icon);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // short_desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // long_desc
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // level
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6) // icon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setShort_desc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLong_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setLevel(cursor.getInt(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
