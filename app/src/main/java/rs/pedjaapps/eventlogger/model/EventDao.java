package rs.pedjaapps.eventlogger.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT".
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Short_desc = new Property(2, String.class, "short_desc", false, "SHORT_DESC");
        public final static Property Long_desc = new Property(3, String.class, "long_desc", false, "LONG_DESC");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Level = new Property(5, int.class, "level", false, "LEVEL");
        public final static Property Icon_id = new Property(6, Long.class, "icon_id", false, "ICON_ID");
    }

    private DaoSession daoSession;


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 1: timestamp
                "\"SHORT_DESC\" TEXT," + // 2: short_desc
                "\"LONG_DESC\" TEXT," + // 3: long_desc
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"LEVEL\" INTEGER NOT NULL ," + // 5: level
                "\"ICON_ID\" INTEGER);"); // 6: icon_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimestamp().getTime());
 
        String short_desc = entity.getShort_desc();
        if (short_desc != null) {
            stmt.bindString(3, short_desc);
        }
 
        String long_desc = entity.getLong_desc();
        if (long_desc != null) {
            stmt.bindString(4, long_desc);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getLevel());
 
        Long icon_id = entity.getIcon_id();
        if (icon_id != null) {
            stmt.bindLong(7, icon_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimestamp().getTime());
 
        String short_desc = entity.getShort_desc();
        if (short_desc != null) {
            stmt.bindString(3, short_desc);
        }
 
        String long_desc = entity.getLong_desc();
        if (long_desc != null) {
            stmt.bindString(4, long_desc);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getLevel());
 
        Long icon_id = entity.getIcon_id();
        if (icon_id != null) {
            stmt.bindLong(7, icon_id);
        }
    }

    @Override
    protected final void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // short_desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // long_desc
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // level
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // icon_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setShort_desc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLong_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setLevel(cursor.getInt(offset + 5));
        entity.setIcon_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Event entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIconDao().getAllColumns());
            builder.append(" FROM EVENT T");
            builder.append(" LEFT JOIN ICON T0 ON T.\"ICON_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Event loadCurrentDeep(Cursor cursor, boolean lock) {
        Event entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Icon icon = loadCurrentOther(daoSession.getIconDao(), cursor, offset);
        entity.setIcon(icon);

        return entity;    
    }

    public Event loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Event> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Event> list = new ArrayList<Event>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Event> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Event> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
